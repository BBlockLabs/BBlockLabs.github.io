"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[391],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,g=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:5},i="Join a Network",s={unversionedId:"running-a-node/join-a-network",id:"running-a-node/join-a-network",title:"Join a Network",description:"After successfully installing and configuring your node you may try connecting to the network.",source:"@site/docs/running-a-node/join-a-network.md",sourceDirName:"running-a-node",slug:"/running-a-node/join-a-network",permalink:"/docs/running-a-node/join-a-network",draft:!1,tags:[],version:"current",lastUpdatedAt:1680264852,formattedLastUpdatedAt:"31 Mar 2023",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Node Configuration",permalink:"/docs/running-a-node/node-configuration"},next:{title:"Making a service",permalink:"/docs/running-a-node/making-a-service"}},l={},c=[{value:"Retrieve the Genesis file",id:"retrieve-the-genesis-file",level:2},{value:"Start bonus-blockd",id:"start-bonus-blockd",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"join-a-network"},"Join a Network"),(0,o.kt)("p",null,"After successfully ",(0,o.kt)("a",{parentName:"p",href:"../running-a-node/node-installation"},"installing and configuring your node")," you may try connecting to the network."),(0,o.kt)("h2",{id:"retrieve-the-genesis-file"},"Retrieve the Genesis file"),(0,o.kt)("p",null,"The first step is to download the Genesis file, by fetching it from an available node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME\ncurl https://[NODE-ADDRESS]/genesis? | jq '.result.genesis' > ~/.bonusblock/config/genesis.json\n")),(0,o.kt)("p",null,"As an example you can get it from BonusBlock sentry node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME\ncurl https://bonusblock-testnet.alter.network/genesis? | jq '.result.genesis' > ~/.bonusblock/config/genesis.json\n")),(0,o.kt)("h2",{id:"start-bonus-blockd"},"Start bonus-blockd"),(0,o.kt)("p",null,"Start the ",(0,o.kt)("inlineCode",{parentName:"p"},"bonus-blockd")," and join the network."),(0,o.kt)("p",null,"Add known working comma separated sentry nodes to ",(0,o.kt)("inlineCode",{parentName:"p"},"config.toml"),".\nSee the full list of testnet nodes at ",(0,o.kt)("a",{parentName:"p",href:"../connecting-to-the-network/testnet"},"Testnet (blocktopia-01)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'PEERS=[NODE-ID]@[NODE-ADDRESS]:[PORT],[NODE1-ID]@[NODE1-ADDRESS]:[PORT]\nsed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \\"$PEERS\\"/" $HOME/.bonusblock/config/config.toml\n')),(0,o.kt)("p",null,"As an example to connect to BonusBlock sentry node use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'PEERS=e5e04918240cfe63e20059a8abcbe62f7eb05036@bonusblock-testnet-p2p.alter.network:26656\nsed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \\"$PEERS\\"/" $HOME/.bonusblock/config/config.toml\n')),(0,o.kt)("p",null,"To start BonusBlock node in interactive (foreground) mode, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bonus-blockd start\n")),(0,o.kt)("p",null,"You can sync from a specific block by adding the flag: ",(0,o.kt)("inlineCode",{parentName:"p"},"--halt-height [blockheight]"),"."))}d.isMDXComponent=!0}}]);